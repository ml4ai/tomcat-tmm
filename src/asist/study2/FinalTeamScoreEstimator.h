#pragma once

#include "pipeline/estimation/SamplerEstimator.h"

namespace tomcat {
    namespace model {

        /**
         * Represents a metric to estimate the mission final score given
         * samples generated until the end of the mission.
         */
        class FinalTeamScoreEstimator : public SamplerEstimator {
          public:
            inline const static std::string NAME = "FinalTeamScore";

            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of the final score metric.
             *
             * @param model: DBN
             * @param frequency_type: frequency at which estimates must be
             * computed
             *
             */
            explicit FinalTeamScoreEstimator(
                const std::shared_ptr<DynamicBayesNet>& model,
                FREQUENCY_TYPE frequency_type = all);

            ~FinalTeamScoreEstimator();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            FinalTeamScoreEstimator(const FinalTeamScoreEstimator& final_score);

            FinalTeamScoreEstimator&
            operator=(const FinalTeamScoreEstimator& final_Score);

            FinalTeamScoreEstimator(FinalTeamScoreEstimator&&) = default;

            FinalTeamScoreEstimator&
            operator=(FinalTeamScoreEstimator&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            void prepare() override;

            std::string get_name() const override;

            /**
             * Estimate the final score based on the particle
             *
             *
             * s generated until
             * the end of the mission related to victim rescue.
             *
             * @param new_data: observations
             * @param particles: particles for the last time step processed
             * @param projected_particles: particles generated by transitioning
             * some time steps into the future
             * @param marginals: marginal distributions for nodes that were
             * rao-blackwellized
             * @param data_point_idx: index of the data point for which
             * particles were generated
             * @param time_step: time step when the first particles in de set
             * were generated
             */
            void estimate(const EvidenceSet& new_data,
                          const EvidenceSet& particles,
                          const EvidenceSet& projected_particles,
                          const EvidenceSet& marginals,
                          int data_point_idx,
                          int time_step,
                          ParticleFilter& filter) override;

          private:
            inline const static int REGULAR_SCORE = 10;
            inline const static int CRITICAL_SCORE = 50;
            inline const static int MAX_REGULAR = 50;
            inline const static int MAX_CRITICAL = 5;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            /**
             * Computes the number of regular and critical rescues based on the
             * particles projected into the future until the end of the mission.
             *
             * @param particles: particles for the last time step processed
             * @param projected_particles: particles projected until the end of
             * the mission
             *
             * @return 2 column matrix. First column contains the number of
             * regular victim rescued and the second column the number of
             * critical victims rescued.
             */
            Eigen::MatrixXi
            get_projected_rescues(const EvidenceSet& particles,
                                  const EvidenceSet& projected_particles) const;

            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------

            int num_players = 1;
        };

    } // namespace model
} // namespace tomcat