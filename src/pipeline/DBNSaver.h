#pragma once

#include <memory>
#include <string>

#include "pgm/DynamicBayesNet.h"
#include "pipeline/ModelSaver.h"
#include "pipeline/training/DBNTrainer.h"
#include "utils/Definitions.h"

namespace tomcat {
    namespace model {

        /**
         * Class responsible to save a model's parameters to files in a specific
         * folder.
         */
        class DBNSaver : public ModelSaver {
          public:
            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of the saver.
             *
             * @param model: DBN
             * @param output_folder_path: folder where the model's parameters
             * must be saved in
             * @param trainer: object that handles parameter learning
             * @param include_partials: if true, all the parameter samples
             * generated during the training process will also be saved under a
             * subdirectory.
             */
            DBNSaver(const std::shared_ptr<DynamicBayesNet>& model,
                     const std::string& output_folder_path,
                     const std::shared_ptr<DBNTrainer>& trainer,
                     bool include_partials);

            ~DBNSaver() = default;

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            DBNSaver(const DBNSaver& saver);

            DBNSaver& operator=(const DBNSaver& saver);

            DBNSaver(DBNSaver&&) = default;

            DBNSaver& operator=(DBNSaver&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            void save() override;

          private:
            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            /**
             * Saves all the parameter samples generated during the training
             * process under a subdirectory of the final model directory.
             *
             * @param model_dir: directory where the final model's parameters
             * are saved.
             */
            void save_partials(const std::string& model_dir) const;

            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------
            // An instance of the trainer is important here so we can access
            // all the parameter samples generated by it (or loaded by it) and
            // estimate probabilities over all sampled models. That way we
            // can compute density confidences over estimates.
            std::shared_ptr<DBNTrainer> trainer;

            // Indicates whether the parameter samples generated during the
            // training process must be saved or not.
            bool include_partials;
        };

    } // namespace model
} // namespace tomcat
