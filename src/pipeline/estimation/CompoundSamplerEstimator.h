#pragma once

#include <memory>
#include <mutex>
#include <unordered_map>
#include <vector>

#include "utils/Definitions.h"

#include "pipeline/estimation/Estimator.h"
#include "pipeline/estimation/SamplerEstimator.h"
#include "sampling/AncestralSampler.h"
#include "sampling/Sampler.h"

namespace tomcat {
    namespace model {

        /**
         * This class represents a compound estimator that computes the
         * estimates by using samples from the nodes' posterior distribution.
         * This estimator has a sampler that generates samples at every call to
         * the estimate function. Concrete estimators (used for evaluation
         * purposes) compute estimates for a given node by using the samples
         * generated by the sampler. Therefore, this estimator cannot be used
         * for evaluation but only for estimation purposes to share computation
         * among different nodes' estimates.
         */
        class CompoundSamplerEstimator : public Estimator {
          public:
            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of a sampler estimator.
             *
             * @param sampler: sampler responsible to generate samples from
             * the model
             * @param random_generator: random number generator
             * @param num_samples: number of samples to generate to
             * approximate the estimated distributions
             */
            CompoundSamplerEstimator(
                const std::shared_ptr<Sampler>& sampler,
                const std::shared_ptr<gsl_rng>& random_generator,
                int num_samples);

            ~CompoundSamplerEstimator();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------
            CompoundSamplerEstimator(const CompoundSamplerEstimator& estimator);

            CompoundSamplerEstimator&
            operator=(const CompoundSamplerEstimator& estimator);

            CompoundSamplerEstimator(CompoundSamplerEstimator&&) = default;

            CompoundSamplerEstimator&
            operator=(CompoundSamplerEstimator&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------
            void cleanup() override;

            void prepare() override;

            void keep_estimates() override;

            void estimate(const EvidenceSet& new_data) override;

            void get_info(nlohmann::json& json) const override;

            std::string get_name() const override;

            bool is_computing_estimates_for(const std::string& node_label) const override;

            std::vector<std::shared_ptr<const Estimator>>
            get_base_estimators() const override;

            /**
             * Adds a concrete estimator to this compound estimator.
             *
             * @param estimator: concrete estimator
             */
            void add_base_estimator(
                const std::shared_ptr<SamplerEstimator>& estimator);

          private:
            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            /**
             * Copies data member from another estimator.
             *
             * @param estimator: other estimator
             */
            void copy(const CompoundSamplerEstimator& estimator);

            /**
             * Adds a new data collection to the nodes of this estimator's
             * model.
             *
             * @param new_data: new data
             * @param time_step: data's column (time step) to use
             */
            void add_data_to_nodes(const EvidenceSet& new_data, int time_step);

            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------

            std::shared_ptr<gsl_rng> random_generator;

            std::shared_ptr<Sampler> sampler;

            int num_samples;

            // Next time step to generate samples to.
            int next_time_step = 0;

            std::vector<std::shared_ptr<SamplerEstimator>> base_estimators;
        };

    } // namespace model
} // namespace tomcat
