#pragma once

#include "pipeline/estimation/SamplerEstimator.h"

namespace tomcat {
    namespace model {

        /**
         * Represents a metric to estimate the mission final score given
         * samples generated until the end of the mission.
         */
        class FinalTeamScoreEstimator : public SamplerEstimator {
          public:
            inline const static std::string LABEL = "FinalTeamScore";

            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of the final score metric.
             *
             * @param model: DBN
             *
             */
            FinalTeamScoreEstimator(
                const std::shared_ptr<DynamicBayesNet>& model);

            ~FinalTeamScoreEstimator();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            FinalTeamScoreEstimator(const FinalTeamScoreEstimator& final_score);

            FinalTeamScoreEstimator&
            operator=(const FinalTeamScoreEstimator& final_Score);

            FinalTeamScoreEstimator(FinalTeamScoreEstimator&&) = default;

            FinalTeamScoreEstimator&
            operator=(FinalTeamScoreEstimator&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            void prepare() override;

            std::string get_name() const override;

            /**
             * Estimate the final score based on the particles generated until
             * the end of the mission related to victim rescue.
             *
             * @param particles: particles for the last time step processed
             * @param projected_particles: particles generated by transitioning
             * some time steps into the future
             * @param marginals: marginal distributions for nodes that were
             * rao-blackwellized
             * @param data_point_idx: index of the data point for which
             * particles were generated
             * @param time_step: time step when the first particles in de set
             * were generated
             */
            void estimate(const EvidenceSet& particles,
                          const EvidenceSet& projected_particles,
                          const EvidenceSet& marginals,
                          int data_point_idx,
                          int time_step) override;

            //------------------------------------------------------------------
            // Getters & Setters
            //------------------------------------------------------------------

          private:
            inline const static int REGULAR_SCORE = 10;
            inline const static int CRITICAL_SCORE = 30;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            /**
             * Computes the current score of the team based on the particles
             * generated until the current time step being processed.
             *
             * @param particles: particles generated to far
             *
             * @return Score per particle
             */
            Eigen::VectorXd
            get_current_score(const EvidenceSet& particles) const;

            /**
             * Computes the projected score of the team based on the particles
             * projected into the future until the end of the mission.
             *
             * @param projected_particles: particles projected until the end of
             * the mission
             *
             * @return Score per particle
             */
            Eigen::VectorXd
            get_projected_score(const EvidenceSet& projected_particles) const;

            //------------------------------------------------------------------
            // Data members
            //------------------------------------------------------------------

            int num_players = 1;

            // Last samples (per player) where regular and critical victims were
            // being rescued. The vectors are binary and will be used to
            // determine whether victims finished being rescued when new
            // particles are received.
            std::vector<Eigen::VectorXi> last_regular_samples;

            std::vector<Eigen::VectorXi> last_critical_samples;

            Eigen::VectorXd current_score;
        };

    } // namespace model
} // namespace tomcat