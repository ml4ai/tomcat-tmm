#pragma once

#include "pipeline/estimation/SamplerEstimator.h"

namespace tomcat {
    namespace model {

        /**
         * Represents a metric to estimate by how much the team quality decays
         * if a specific player stays in the same map section for at least 30
         * more seconds.
         */
        class TeamQualityDecayEstimator : public SamplerEstimator {
          public:
            inline const static std::string NAME = "TeamQualityDecay";

            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of the team quality decay metric.
             *
             * @param model: DBN
             * @param frequency_type: frequency at which estimates must be
             * computed
             * @param json_config: extra parameters
             *
             */
            TeamQualityDecayEstimator(
                const std::shared_ptr<DynamicBayesNet>& model,
                FREQUENCY_TYPE frequency_type = all,
                const nlohmann::json& json_config);

            ~TeamQualityDecayEstimator();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            TeamQualityDecayEstimator(const TeamQualityDecayEstimator& final_score);

            TeamQualityDecayEstimator&
            operator=(const TeamQualityDecayEstimator& final_Score);

            TeamQualityDecayEstimator(TeamQualityDecayEstimator&&) = default;

            TeamQualityDecayEstimator&
            operator=(TeamQualityDecayEstimator&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            void prepare() override;

            std::string get_name() const override;

            /**
             * Estimate the team quality decay by inferring the team quality if
             * the player stays in the same section of the map for 30 seconds.
             *
             * @param new_data: observations
             * @param particles: particles for the last time step processed
             * @param projected_particles: particles generated by transitioning
             * some time steps into the future
             * @param marginals: marginal distributions for nodes that were
             * rao-blackwellized
             * @param data_point_idx: index of the data point for which
             * particles were generated
             * @param time_step: time step when the first particles in de set
             * were generated
             */
            void estimate(const EvidenceSet& new_data,
                          const EvidenceSet& particles,
                          const EvidenceSet& projected_particles,
                          const EvidenceSet& marginals,
                          int data_point_idx,
                          int time_step,
                          ParticleFilter& filter) override;

          private:
            const static int SECONDS_IN_SECTION = 30;

            int player_number;
        };

    } // namespace model
} // namespace tomcat