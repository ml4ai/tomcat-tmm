#pragma once

#include "pipeline/estimation/SamplerEstimator.h"

namespace tomcat {
    namespace model {

        /**
         * Represents a metric to estimate the probability of entering a room or
         * leaving right after the player sees a block.
         */
        class MarkerFalseBeliefEstimator : public SamplerEstimator {
          public:
            inline const static std::string LABEL = "MarkerFalseBelief";

            //------------------------------------------------------------------
            // Constructors & Destructor
            //------------------------------------------------------------------

            /**
             * Creates an instance of the estimator
             *
             * @param model: DBN
             *
             *
             */
            MarkerFalseBeliefEstimator(
                const std::shared_ptr<DynamicBayesNet>& model);

            ~MarkerFalseBeliefEstimator();

            //------------------------------------------------------------------
            // Copy & Move constructors/assignments
            //------------------------------------------------------------------

            MarkerFalseBeliefEstimator(
                const MarkerFalseBeliefEstimator& estimator);

            MarkerFalseBeliefEstimator&
            operator=(const MarkerFalseBeliefEstimator& estimator);

            MarkerFalseBeliefEstimator(MarkerFalseBeliefEstimator&&) = default;

            MarkerFalseBeliefEstimator&
            operator=(MarkerFalseBeliefEstimator&&) = default;

            //------------------------------------------------------------------
            // Member functions
            //------------------------------------------------------------------

            void prepare() override;

            std::string get_name() const override;

            /**
             * Estimates a false belief action by considering the player's
             * intent, marker he saw and marker legend version he was assigned
             * to. .
             *
             * @param particles: particles for the last time step processed
             * @param projected_particles: particles generated by transitioning
             * some time steps into the future
             * @param marginals: marginal distributions for nodes that were
             * rao-blackwellized
             * @param data_point_idx: index of the data point for which
             * particles were generated
             * @param time_step: time step when the first particles in de set
             * were generated
             */
            void estimate(const EvidenceSet& particles,
                          const EvidenceSet& projected_particles,
                          const EvidenceSet& marginals,
                          int data_point_idx,
                          int time_step) override;

            //------------------------------------------------------------------
            // Getters & Setters
            //------------------------------------------------------------------

          private:

        };

    } // namespace model
} // namespace tomcat