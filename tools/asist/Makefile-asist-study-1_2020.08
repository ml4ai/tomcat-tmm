# This Makefile is pulled from laplace along with all the files
# needed for the study-2_pilot-2_2021.02 responsible. This is done by the
# targets in the Makefile-asist in the root of this project's directory. This
# file is responsible for
# 1. Pulling messages from the GCS and convert
# 2. Converting messages to an appropriate matrix format
# 3. Training a model using the converted messages
# 4. Saving (locally) the trained parameters for future usage
# 5. Uploading the trained parameters to Laplace (requires explicitly target
# execution)
# 6. Computing estimates offline (executed with the final report if anything
# changed)
# 7. Generating final report (requires explicitly target execution)

SERVER = laplace
ASIST_SERVER_DIR = /data/asist

# The name of the Google Cloud Source folder where the ASIST HSR data resides.
STUDY_ID = study-1_2020.08

# Binaries required for the ASIST evaluation analyses
BUILD_DIR = ../../../build

# Path to the files containing the maps definition
MAP_DIR = map
MAP_PATH = $(MAP_DIR)/Falcon_v1.0.json

# Path to the file containing the model definition
MODEL_PATH = ../../../models/tomcat-v2.0.json

# Original data from the message bus to be used for training and evaluation
MSG_DIR = messages
SPLIT_MSG_DIR = split_messages
TRAIN_MSG_DIR = $(SPLIT_MSG_DIR)/train
EVAL_MSG_DIR = $(SPLIT_MSG_DIR)/eval

# File with the trial numbers to use for training and evaluation
TRAIN_TRIALS_FILE = $(SPLIT_MSG_DIR)/train_list.txt
EVAL_TRIALS_FILE = $(SPLIT_MSG_DIR)/eval_list.txt

# Directory where converted data will reside
SAMPLES_DIR = samples
TRAIN_SAMPLES_DIR = $(SAMPLES_DIR)/train
EVAL_SAMPLES_DIR = $(SAMPLES_DIR)/eval

# Directory where the evaluation will be saved
EVAL_DIR = eval
EVAL_PATH = $(EVAL_DIR)/$(STUDY_ID).json
REPORT_PATH = $(EVAL_DIR)/report.txt

# Directory where the trained parameters will be saved
PARAMS_DIR = params

# For estimation
INFERENCE_PATH = inference.json

# Phony targets
.PHONY: all
.PHONY: build
.PHONY: sync
.PHONY: split
.PHONY: map
.PHONY: convert
.PHONY: train
.PHONY: upload
.PHONY: eval

all: build sync split map convert train

# Builds the system so that the model is retrained if there's a new version of
# the executable available and create the necessary folders for the files
# generated by this script.
build:
	@cd $(BUILD_DIR) && make -j convert
	@cd $(BUILD_DIR) && make -j train
	@cd $(BUILD_DIR) && make -j evaluate

# Synchronize message folder with the GSC
sync:
	@GCS_DIR=$(STUDY_ID) DATA_DIR=$(MSG_DIR) ../../../tools/asist/sync_asist_data

split: $(TRAIN_MSG_DIR) $(EVAL_MSG_DIR)

# Creates symbolic links for the message files in the folder split_messages
# according to the trial numbers defined for training.
$(TRAIN_MSG_DIR): ../../../tools/asist/split_asist_data $(TRAIN_TRIALS_FILE)
	@echo "Reserving training messages..."
	@ORIGINAL_MSG_DIR=$(MSG_DIR) TRIALS_FILE=$(TRAIN_TRIALS_FILE) \
	TARGET_MSG_DIR=$@ ./$<

$(EVAL_MSG_DIR): ../../../tools/asist/split_asist_data $(EVAL_TRIALS_FILE)
	@echo "Reserving eval messages..."
	@ORIGINAL_MSG_DIR=$(MSG_DIR) TRIALS_FILE=$(EVAL_TRIALS_FILE) \
	TARGET_MSG_DIR=$@ ./$<

# Downloads the map used in this study from the collections of all ASIST
# maps in Laplace
map: $(MAP_PATH)

$(MAP_PATH):
	@echo "Downloading map..."
	@mkdir -p $(@D)
	@scp $(SERVER):$(ASIST_SERVER_DIR)/maps/$(@F) $(MAP_PATH)

# Parses messages from the test bed and converts them to matrices of
# observations. One matrix for each observable node in the model. We always
# try to convert, if there's nothing to convert, the program will handle that.
convert: $(TRAIN_SAMPLES_DIR) $(EVAL_SAMPLES_DIR)

$(TRAIN_SAMPLES_DIR):
	@echo "Converting training data..."
	@./$(BUILD_DIR)/bin/convert --map_json $(MAP_PATH) \
		--messages_dir $(TRAIN_MSG_DIR) --data_dir $(TRAIN_SAMPLES_DIR) \
		--seconds 600 --step_size 1

$(EVAL_SAMPLES_DIR):
	@echo "Converting evaluation data..."
	@./$(BUILD_DIR)/bin/convert --map_json $(MAP_PATH) \
		--messages_dir $(EVAL_MSG_DIR) --data_dir $(EVAL_SAMPLES_DIR) \
		--seconds 600 --step_size 1

# The model only needs to be retrained if the executable changed, or if any of
# the files in $(TRAIN_SAMPLES_DIR) changed.
train: $(PARAMS_DIR)

# We insert and remove a dummy file to change the modification date of the
# directory
$(PARAMS_DIR): $(BUILD_DIR)/bin/train $(TRAIN_SAMPLES_DIR)/conversion_log.json
	@echo "Training model..."
	@./$< --model_json $(MODEL_PATH) --data_dir $(TRAIN_SAMPLES_DIR) \
	    --params_dir $@ --T 600 --burn_in 50 --samples 100 --jobs 4
	@touch $@/dummy.txt
	@rm $@/dummy.txt

upload:
	@echo "Compressing parameters..."
	@tar --exclude partials/ --exclude '.DS_Store' -zcf params.tar.gz params
	@echo "Uploading parameters to Laplace..."
	@scp params.tar.gz $(SERVER):$(ASIST_SERVER_DIR)/$(STUDY_ID)
	@rm params.tar.gz

# Estimates only need to be recomputed if either the executable changed, or
# the model's parameters - saved in the directory $(PARAMS_DIR) - changed, or
# the evaluation data changed.
$(EVAL_PATH): build $(BUILD_DIR)/bin/evaluate $(PARAMS_DIR) $(INFERENCE_PATH) \
$(MAP_PATH)
	@echo "Evaluating model..."
	@./$(BUILD_DIR)/bin/evaluate --exp_id $(STUDY_ID) --model_json $(MODEL_PATH) \
	    --data_dir $(EVAL_SAMPLES_DIR) --params_dir $(PARAMS_DIR) \
		--eval_dir $(EVAL_DIR) --inference_json $(INFERENCE_PATH) \
 	    --T 600

eval: $(REPORT_PATH)

$(REPORT_PATH): ../../../tools/asist/create_study-1_2020.08_report.py \
$(EVAL_PATH)
	@python3 $< $(EVAL_PATH) $(EVAL_SAMPLES_DIR)/conversion_log.json $@